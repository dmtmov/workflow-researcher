# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CICD

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  auto-release:
    name: "Auto Release"
    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@1.26.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: false

#       - name: Get previous tag
#         id: previoustag
#         uses: "WyriHaximus/github-action-get-previous-tag@v1"


#       - name: Get seconds from previous tag to now
#         id: nexttag
#         shell: bash
#         env:
#           TIMESTAMP_TAG: ${{ steps.previoustag.outputs.timestamp }}
#         run: |
#           echo "::set-output name=timestamp-diff::$(expr $(printf '%(%s)T') - $TIMESTAMP_TAG)"



#       - uses: "marvinpinto/action-automatic-releases@latest"
#         with:
#           repo_token: "${{ secrets.GITHUB_TOKEN }}"
#           automatic_release_tag: "latest"
#           prerelease: false
#           title: "${{ github.GITHUB_TOKEN }}"


#   linting:
#     name: Linting Code
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions/setup-python@v2
#       - uses: psf/black@20.8b1
#         with:
#             args: ". --check --diff"

#   testing:
#     name: Run Unit Tests
#     runs-on: ubuntu-latest
#     strategy:
#       max-parallel: 4
#       matrix:
#         python-version: [ 3.9 ]

#     steps:
#     - name: Checking Out Repo
#       uses: actions/checkout@v2

#     - name: Set up Python ${{ matrix.python-version }}
#       uses: actions/setup-python@v2
#       with:
#         python-version: ${{ matrix.python-version }}

#     - name: Update Ubuntu
#       run: |
#         sudo apt-get update -y

#     - name: Install Requirements' Dependencies
#       run: |
#         sudo apt-get update -y
#         sudo apt-get install -y libxml2-dev libxmlsec1-dev libxmlsec1-openssl

#     - name: Install Requirements
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.pip
        
#     - name: Lint with flake8
#       run: |
#         flake8 app.py --show-source --statistics --max-line-length=119

#     - name: Run tests
#       env:
#         AWS_APP_CLIENT_ID: CLIENT-ID
#       run: |
#         pytest --capture=no

#   build-and-push:
#     name: ECR
#     runs-on: ubuntu-latest
#     needs: [linting, testing]
#     if: github.ref == 'refs/heads/master'
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v2
#         with:
#           fetch-depth: 0

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-region: eu-west-1

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

      # - name: Build, tag, and push image to Amazon ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: content-management
      #     IMAGE_TAG: latest  # specify the IMAGE_TAG
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#   deploy:
#     needs: [build-and-push]
#     name: Deployment
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/master'

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v2
#         with:
#           fetch-depth: 0

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-region: eu-west-1








      # - name: Configure kubeconfig
      #   run: |
      #     aws eks --region eu-west-1 update-kubeconfig --name dev-eks-cluster
      # - name: Helm Deploy
      #   run: |
      #     ...
